# This file describe most files used by WHERE and is used extensively by the where.lib.files module to read from, write
# to and copy the correct files.
#
# Each file is referenced by a unique file key, written here in square brackets, e.g. [file_key]. Further, the
# following key-values are recognized:
#
#     filename:       The name of the file on disk.
#     aliases:        Alternative file names.
#     directory:      The directory the file is located in.
#     publish:        Directories the file may be published (copied) to.
#     description:    Quick description of the file, only for documenting purposes.
#     specification:  Link to a document specifying the format of the file.
#     creator:        The script that creates the file, if applicable.
#     origin:         Web site where the file can be found, if applicable. This should point to a website where the
#                     file can be downloaded. Not used by the program, only for documenting purposes.
#     url:            The actual url (or base-url without filename) the file can be downloaded from.
#     parser:         Name of parser (i.e. file in parsers-directory without .py) that parses the file.
#
# Files that may be gzipped can be specified as having {gz} at the end of the filename (with the curly braces). In
# this case, the gzipped version will be automatically used if it as available.  Otherwise, the fallback is the
# unzipped version.
#
# This configuration file uses placeholders, which are replaced by running WHERE, for example the current running date
# or the station in use.  The following placeholders are available for all files:
#
#   PLACEHOLDER      PIPELINE   DESCRIPTION
#_________________________________________________________________________________________
#   {ce}             DGSV     - century (e.g. 20 for the year 2019)
#   {date}           DGSV     - same as {yyyy}{mm}{dd}, e.g. 20190128
#   {d}              DGSV     - day (1-31)
#   {dd}             DGSV     - day (01-31)
#   {dow}            DGSV     - day of week (0: Sunday, 1: Monday, ..., 6: Saturday)
#   {doy}            DGSV     - day of year (001-366)
#   {gpsweek}        DGSV     - GPS week
#   {gz}             DGSV     - file may or may not be gzipped
#   {hh}             DGSV     - hour (00-23)
#   {id}             DGSV     - as provided by --id=... on the command line
#   {m}              DGSV     - month (1-12)
#   {mm}             DGSV     - month (01-12)
#   {mmm}            DGSV     - month (jan-dec)
#   {MMM}            DGSV     - month (JAN-DEC)
#   {pipeline}           DGSV     - technique (e.g. doris, gnss, vlbi, slr)
#   {user}           DGSV     - user name
#   {yy}             DGSV     - last 2 digits of year (00-99)
#   {yyyy}           DGSV     - year (e.g. 2019)
#
# In addition, additionaly placeholders can be used, but these must be explicitly included by specifying file_vars
# when the file is opened. Currently, the following placeholders are in use:
#
#   {gravity_field}    S      - TODO: ???
#   {provider}         S      - TODO: ???
#   {sampling_rate}   G       - Sampling rate of observation data in seconds
#   {sat_id}           S      - TODO: ???
#   {sat_shortname}    S      - TODO: ???
#   {stage}          DGSV     - TODO: ???
#   {station}         G       - Station name in lowercase letters
#   {STATION}         G       - Station name in uppercase letters
#   {timestamp}      DGSV     - TODO: ???
#   {type}                    - Type of coefficients for VMF-files
#   {version}        DGSV     - TODO: ???

[__vars__]
path_analysis    = {path_work}/{user}/{pipeline}{id}/{date}

[config]
filename        = {pipeline}-{date}-config.txt
directory       = {path_analysis}
description     = Configuration of an analysis for a given pipeline and rundate. Default values come from the
                  main WHERE configuration file.
creator         = setup.py

[directory_work]
filename        =
directory       = {path_analysis}
description     = Used by There to find directories containing data

[requirements]
filename        = {pipeline}-{date}-requirements.txt
directory       = {path_analysis}
description     = List of python packages used with versions
creator         = lib/util.py (write_requirements)

[log]
filename        = {pipeline}-{date}-log.log
directory       = {path_analysis}
description     = Log of a Where model run
creator         = lib/log.py

[timestamp]
filename        = {pipeline}-{date}-timestamp.txt
directory       = {path_analysis}
description     = Timestamp of when the Where configuration was created and updated
creator         = setup.py

[slr_center_of_mass]
filename        = com_{satellite}.txt
directory       = {path_data}/slr/apriori/center_of_mass
description     = center of mass tables
origin          = https://ilrs.dgfi.tum.de
url             = https://ilrs.dgfi.tum.de/fileadmin/data_handling
parser          = slr_center_of_mass

[slr_handling_file]
filename        = ILRS_Data_Handling_File.snx
directory       = {path_data}/slr/apriori/edit
description     = information on range-, time- or pressure biases
origin          = https://ilrs.dgfi.tum.de/index.php?id=6
url             = https://ilrs.dgfi.tum.de/fileadmin/data_handling/
parser          = slr_handling_file

[gravity_coefficients]
filename        = {gravity_field}.gfc{gz}
directory       = {path_data}/common/gravity_field
description     = Coefficients for Earth gravity field computations
specification   = http://icgem.gfz-potsdam.de/ICGEM/documents/ICGEM-Format-2011.pdf
origin          = http://icgem.gfz-potsdam.de/tom_longtime
url             = http://icgem.gfz-potsdam.de/getmodel/gfc/c50128797a9cb62e936337c890e4425f03f0461d7329b09a8cc8561504465340/
parser          = gravity_icgem

[slr_external_orbits]
filename        = {provider}.orb.{sat_name}.{yy}{mm}{dd}.{version}.sp3
directory       = {path_data}/slr/orbit/external/{sat_name}/{yy}{mm}{dd}
description     = External orbits
specification   = ftp://ftp.igs.org/pub/data/format/data/format/sp3_docu.txt
origin          = ftp://cddis.nasa.gov/pub/slr/products/orbits/
url             = ftp://cddis.nasa.gov/pub/slr/products/orbits/{sat_name}/{yy}{mm}{dd}
parser          = sp3

[slr_obs_crd]
filename        = {sat_name}_{yyyy}{mm}.npt
directory       = {path_data}/slr/obs/{sat_name}/{yyyy}
description     = SLR observations in CRD format
specification   = http://ilrs.gsfc.nasa.gov/data_and_products/formats/crd.html
origin          = ftp://edc.dgfi.tum.de/pub/slr/data/npt_crd/
url             = ftp://edc.dgfi.tum.de/pub/slr/data/npt_crd/{sat_name}/{yyyy}
parser          = slr_crd

[slr_obs_ql]
filename        = {sat_id}.QLSLR.{yy}{mmm}-raw
directory       = {path_data}/slr/obs/{sat_shortname}/{yyyy}
description     = SLR observations in QuickLook format: TODO - where to put these?
origin          = TODO
parser          = slr_ql

[eccentricity]
filename        = ecc_xyz.snx
directory       = {path_data}/slr/apriori/eccentricity
description     = Eccentricity vectors for SLR telescopes
origin          = https://ilrs.cddis.eosdis.nasa.gov/network/site_procedures/eccentricity.html
url             = https://cddis.nasa.gov/archive/slr/slrocc/
parser          = slr_eccentricity

[slr_ephemeris]
filename        = {sat_name}_cpf_{yy}{mm}{dd}_{version}.{provider}
directory       = {path_data}/slr/orbit/predictions/{sat_name}/{yyyy}
description     = SLR apriori orbits, needed for initial values to the orbit integrator
specification   = http://ilrs.gsfc.nasa.gov/docs/2006/cpf_1.01.pdf
origin          = https://cddis.nasa.gov/archive/slr/cpf_predicts/
url             = https://cddis.nasa.gov/archive/slr/cpf_predicts/{yyyy}/{sat_name}/
parser          = slr_prediction

[depends]
filename        = {pipeline}-{date}-{sat_name}-{stage}-depends.txt
directory       = {path_analysis}
description     = List of dependencies for a given technique, session, stage and model run date.
creator         = lib.dependencies

[dataset]
filename        = {pipeline}-{date}-{sat_name}-{stage}-{label}-dataset.hdf5
directory       = {path_work}/{user}/{pipeline}{id}/{date}
description     = Data for a dataset stored in the binary HDF5 format.
creator         = data.Dataset.write, usually called from the pipelines

[dataset_hdf5]
filename        = {pipeline}-{date}-{sat_name}-{stage}-dataset.hdf5
directory       = {path_analysis}
description     = Data for a dataset stored in the binary HDF5 format.
creator         = data.Dataset.write, usually called from do_analysis.py and techniques/*

[dataset_json]
filename        = {pipeline}-{date}-{sat_name}-{stage}-dataset.json
directory       = {path_analysis}
description     = Data for a dataset stored in the plain text JSON format.
creator         = data.Dataset.write, usually called from do_analysis.py and techniques/*

[output_sinex]
filename        = {yy}{MMM}{dd}_{file_agency}{solution}.snx
directory       = {path_analysis}
publish         = {path_publish}/slr/sinex/{solution}/
description     = Normal equation for submission to ILRS
creator         = writers/sinex.py
parser          = slr_estimate_sinex

[trf-itrf_ssc]
filename        = ITRF{version}_SLR.SSC.txt
directory       = {path_data}/common/trf/itrf{version}
description     = ITRF positions and velocities for SLR stations
origin          = http://itrf.ign.fr/ITRF_solutions/2014/more_ITRF2014.php
url             = http://itrf.ign.fr/ITRF_solutions/{version}/doc
parser          = trf_ssc

[trf-itrf_snx]
filename        = ITRF{version}-ILRS-TRF.SNX{gz}
aliases         = ITRF{version}-TRF-ILRS.SNX{gz}
directory       = {path_data}/common/trf/itrf{version}
description     = ITRF positions and velocities for SLR stations
origin          = http://itrf.ign.fr/ITRF_solutions/2014/more_ITRF2014.php
url             = ftp://itrf.ign.fr/pub/itrf/itrf{version}
parser          = trf_snx

[trf-itrf_snx_psd]
filename        = ITRF{version}-psd-slr.snx
directory       = {path_data}/common/trf/itrf{version}
description     = post seismic deformation model paramters for SLR stations
origin          = http://itrf.ign.fr/ITRF_solutions/2014/more_ITRF2014.php
url             = ftp://itrf.ign.fr/pub/itrf/itrf{version}
parser          = trf_snx_psd

[trf-itrf_snx_soln]
filename        = ITRF{version}-soln-slr.snx
aliases         = Discontinuities-ILRS-I08.snx
directory       = {path_data}/common/trf/itrf{version}
description     = post seismic deformation model paramters for SLR stations
origin          = http://itrf.ign.fr/ITRF_solutions/2014/more_ITRF2014.php
url             = ftp://itrf.ign.fr/pub/itrf/itrf{version}
parser          = trf_snx_soln

[trf-slrf_snx]
filename        = SLRF{version}.snx
directory       = {path_data}/common/trf/slrf
description     = Quarterly-ish SLR reference frame solutions
origin          = https://ilrs.cddis.eosdis.nasa.gov/
url             = https://cddis.nasa.gov/archive/slr/products/resource/
parser          = trf_snx

[solar_flux]
filename        = F10.7CM
directory       = {path_data}/slr/apriori/flux
description     = Solar Flux
specification   = http://www.ngdc.noaa.gov/stp/space-weather/solar-data/solar-features/solar-radio/noontime-flux/penticton/penticton_observed/tables/
origin          = TODO
parser          = solar_flux


[ocean_tides_fes2004]
filename        = fes2004_Cnm-Snm.dat
directory       = {path_data}/common/tides/ocean
description     = Coefficients for main tidal waves of FES2004
origin          = ftp://tai.bipm.org/iers/conv2010/chapter6/tidemodels/fes2004_Cnm-Snm.dat
url             = ftp://tai.bipm.org/iers/conv2010/chapter6/tidemodels
parser          = ocean_tides_fes2004

[ocean_tides_fes2014]
filename        = fes2014b.v1.Cnm-Snm_Om1+Om2C20_without_S1_wave.POT_format.txt
directory       = {path_data}/common/tides/ocean
description     = Coefficients for main tidal waves of FES2014
origin          = https://grace.obs-mip.fr/dealiasing_and_tides/ocean-tides/
url             = http://gravitegrace.get.obs-mip.fr/geofluid/
parser          = ocean_tides_fes2004

[ocean_tides_s1]
filename        = S1.dat
directory       = {path_data}/common/tides/ocean
description     = Coefficients for S1 tidal waves of FES2004
origin          = ftp://tai.bipm.org/iers/conv2010/chapter6/tidemodels/fes2004_Cnm-Snm.dat
url             = ftp://tai.bipm.org/iers/conv2010/chapter6/tidemodels
parser          = ocean_tides_fes2004_S1

